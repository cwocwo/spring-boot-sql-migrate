buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.natork.printer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
	mavenCentral()
}


ext {
	keycloakVersion = '4.5.0.Final'
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-freemarker')
	implementation('org.springframework.boot:spring-boot-starter-web')
	runtimeOnly('org.liquibase:liquibase-core')
	runtimeOnly('com.h2database:h2')
	runtimeOnly('org.postgresql:postgresql')
	compileOnly('org.projectlombok:lombok')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}


eclipse {
	classpath {
	  file {
		//closure executed after .classpath content is loaded from existing file
		//and after gradle build information is merged
		whenMerged { classpath ->
		  //you can tinker with the Classpath here
			def libs = classpath.entries.findAll {entry->
				entry.kind == 'lib'
			}
			classpath.entries.removeAll(libs)
			libs.sort {lib->
				def path = lib.path
				path[path.lastIndexOf('/')..-1]
			}
			classpath.entries.addAll(libs)
		}
	  }
	}
  }

